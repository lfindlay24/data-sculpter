AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-data-sculptor

  Sample SAM Template for sam-data-sculptor

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  API:
    Type: AWS::Serverless::Api # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      StageName: Dev
      Auth:
        DefaultAuthorizer: MyLambdaAuthorizer
        Authorizers:
          MyLambdaAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: create.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        CreateUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
  
  DataInsertionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: DataInsertion.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        DataInsertion:
          Type: Api
          Properties:
            Path: /data
            Method: get

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
          - Sid: ListBucketPermission
            Effect: Allow
            Principal: '*'
            Action: 's3:ListBucket'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
      Bucket: !Ref S3Bucket

            RestApiId: !Ref API
            Path: /user
            Method: POST
            Auth:
              Authorizer: NONE

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: update.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user/{userId}
            Method: PATCH
            Auth:
              Authorizer: MyLambdaAuthorizer

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: deleteUser.lambda_handler
      Runtime: python3.12
      Timeout: 5
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user/{userId}
            Method: DELETE
            Auth:
              Authorizer: MyLambdaAuthorizer

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: getUser.lambda_handler
      Runtime: python3.12
      Timeout: 5
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user/{userId}
            Method: GET
            Auth:
              Authorizer: MyLambdaAuthorizer

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: login.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /login
            Method: POST
            Auth:
              Authorizer: NONE

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: basic.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures: 
      - x86_64

  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: user_id
        Type: String
      TableName: ds_users
