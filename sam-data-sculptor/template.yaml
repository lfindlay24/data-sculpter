AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-data-sculptor

  Sample SAM Template for sam-data-sculptor

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        SQS_URL: !GetAtt MessageQueue.QueueUrl

Resources:
  API:
    Type: AWS::Serverless::Api # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      StageName: Dev
      Auth:
        DefaultAuthorizer: MyLambdaAuthorizer
        Authorizers:
          MyLambdaAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn

  DataInsertionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: DataInsertion.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        DataInsertion:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /data
            Method: POST
            Auth:
              Authorizer: NONE

  DataReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: DataRead.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        DataRead:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /data
            Method: GET
            Auth:
              Authorizer: NONE

  DataUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: DataUpdate.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        DataRead:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /data
            Method: PUT
            Auth:
              Authorizer: NONE

  DataDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: DataDelete.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        DataRead:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /data/{id}
            Method: Delete
            Auth:
              Authorizer: NONE

  GroupNameCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: GroupCreate.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        DataInsertion:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /data/group
            Method: PUT
            Auth:
              Authorizer: NONE

  GroupNameDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DataEndpoints/
      Handler: GroupDelete.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        DataInsertion:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /data/group/{id}
            Method: DELETE
            Auth:
              Authorizer: NONE

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: create.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
        - x86_64
      Events:
        CreateUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref API
            Path: /user
            Method: POST
            Auth:
              Authorizer: NONE

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: update.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user
            Method: PUT
            Auth:
              Authorizer: NONE

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: deleteUser.lambda_handler
      Runtime: python3.12
      Timeout: 5
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user
            Method: DELETE
            Auth:
              Authorizer: MyLambdaAuthorizer

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_api/
      Handler: getUser.lambda_handler
      Runtime: python3.12
      Timeout: 5
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user
            Method: GET
            Auth:
              Authorizer: MyLambdaAuthorizer

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: login.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /login
            Method: POST
            Auth:
              Authorizer: NONE

  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: emailing-services/
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /user/forgot-password
            Method: POST
            Auth:
              Authorizer: NONE

  CreateGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: group_api/
      Handler: create.lambda_handler
      Runtime: python3.12
      Timeout: 3
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /group
            Method: POST
            Auth:
              Authorizer: NONE

  AddUserToGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: group_api/
      Handler: add_user.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        AddUserToGroup:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /group/add-user
            Method: POST
            Auth:
              Authorizer: NONE
  
  RemoveUserFromGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: group_api/
      Handler: remove_user.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        RemoveUserFromGroup:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /group/remove-user
            Method: DELETE
            Auth:
              Authorizer: NONE

  DeleteGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: group_api/
      Handler: delete.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        DeleteGroup:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /group
            Method: DELETE
            Auth:
              Authorizer: NONE

  GetGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: group_api/
      Handler: get_group.lambda_handler
      Runtime: python3.12
      Timeout: 3
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        GetGroup:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /group/{group_name}
            Method: GET
            Auth:
              Authorizer: NONE

  GetAllGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: group_api/
      Handler: get_all_groups.lambda_handler
      Runtime: python3.12
      Timeout: 3
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
      - x86_64
      Events:
        GetAllGroups:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /group/
            Method: GET
            Auth:
              Authorizer: NONE

  EmailerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: emailing-services/
      Handler: emailer.handler
      Runtime: nodejs20.x
      Timeout: 10
      Policies:
        - AmazonSQSFullAccess
      Architectures:
      - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageQueue.Arn
            BatchSize: 1

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: basic.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures: 
      - x86_64

  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ds_message_queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true

  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: email
        Type: String
      TableName: ds_users

  GroupTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: group_name
        Type: String
      TableName: ds_groups
  
  UserJsonTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: json_id
        Type: String
      TableName: ds_user_json
